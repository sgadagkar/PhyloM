unit modDataTypes;

{$mode objfpc}{$H+}

interface

uses
  Classes, SysUtils, Forms, StdCtrls, ComCtrls, Grids, Dialogs, Graphics;

type
  TBinaryDataType = set of char;
  CompassPnt = (N, NE, E, SE, S, SW, W, NW);
  TVerticalMode = (Open, AParent, Child, Leaf);
  QuadrantSigns = record
    A: single;
    X, Y: integer;
  end;
  QudrrantFactor = Array[CompassPnt] of QuadrantSigns;

const
  karryMinusPlus: TBinaryDataType = ['-','+']; // Binary data type - or +
  karryZeroOne: TBinaryDataType = ['0','1'];   // Binary data type 0 or 1
  dblZero: double = 0.0;
  strZero = '0.000';
  strBlank = '';
  kRightangle = 90.0;
  kboolTest = False;
  kRghtAnglBsctd = kRightangle / 2.0;
  kSemiCircle = kRightangle * 2.0;
  kThrQtrAngle = kRightangle * 3.0;
  kFullCircle = kSemiCircle * 2.0;
  kStartAngle = 90.0;
  EmptyBinary = '*';
  intZeroTests = 0;
  kintDisabledSpcs = -1;
  kintInvalidBracket = -1;
  kStartBracketX = 20;
  kStartBracketY = 400;
  kStrtBrcktTOX = 50;
  kStrtBrcktTOY = 90;
  kUnknownNode = -1;
  wrdNoType = 65535;
  wrdBPM = 0;                     // Binary +/- type data
  wrdB01 = 1;                     // Binary 0/1 type data
  wrdMeasurement = 2;             // Measurement type data
  MinSpecies = 1;
  MinTests = 1;
  kVerticalBracket = 15;
  kVrtclBrcktTO = 26;
  kVrtclBrcktTOBS = 32;
  kHrzntlBrcktTO = 50;
  kShortLengthFactor = 1;
  kVrtDblLfSpc = 20;
  kRadialTree = 0;                // Radial tree graph
  kBracketTree = 1;               // Rectangular tree graph
  kTopologyOnlyTree = 2;          // Topology only rectangular tree graph
  kInvalidBinary = '**';          // Invalid binary bracket for invalid data
  kInvalidData: double = -9999.0; // Invalid data constant
  kFullTitleLength = 1024;        // Single line string limit in memeo control
  kDataTableTitle: array[0..45] of string = ('Node Name', 'Index', 'QIndex', 'IsActive', 'Branch Length', 'Node Level', 'Node Parent', 'Angle', 'B-S-1', 'B-S-2', 'E-S-1', 'E-S-2', 'B-R-X', 'B-R-Y', 'E-R-X', 'E-R-Y', 'Newick Token',
                                             'Begin Vertical.x', 'Begin Vertical.y', 'Top Horizontal.x', 'Top Horizontal.y', 'Midpoint.x', 'Midpoint.y', 'End Vertical.x', 'End Vertical.y', 'Bttm Horizontal.x', 'Bttm Horizontal.y',
                                             'Vertical Length', 'Vertical Space', 'Vertical Top', 'Vertical Bottom', 'Node Tier', 'Bootstrap', 'Leaves', 'Bracket Index', 'Top Vertical.x', 'Top Vertical.y', 'Bttm Vertical.x', 'Bttm Vertical.y',
                                             'Begin Horizontal.x', 'Begin Horizontal.y', 'End Horizontal.x', 'End Horizontal.y', 'Completed', 'Connected', 'Drawn');
  karryQF: QudrrantFactor = ((A:0.0; X:0; Y:1), (A:45.0; X:1; Y:1), (A:90.0; X:1; Y:0), (A:135.0; X:1; Y:-1), (A:180.0; X:0; Y:-1),
                             (A:225.0; X:-1; Y:-1), (A:270.0; X:-1; Y:0), (A: 315.0; X:-1; Y:1));

type
  TTreeOrigin = record
    GraphOrigin: TPoint;
    Width,
    Height: integer;              //                                                    Segment      Segment
  end;                            //                                                     (x,y)        (x,y)
  TOrigin = record                //                                              Begin    +------------+    End
    initWidth,                    //                                                    [Parent]    [Child 1]  int1stXNd
    initHeight: integer;          //                                                    [Sibling]   [Child 2]  int2ndXNd
    ttoBracket,                   //
    ttoTplgyOnly,                 //
    ttoRadial: TTReeOrigin;       //
  end;                            //                                                          BgnVrtcl         TopHrzntl
  TSegment = record               //                                                           (x,y)             (x,y)
    pntRadial: TPoint;            // Point(x,y) on radial tree                                   +-----------------+
    int1stXNd,                    // Indexes to child branches                                   |
    int2ndXNd: integer;           //                                                             |
  end;                            //                                                     MidPoint+
  TVrtclPosition = record         //                                                       (x,y) |
    BgnVrtcl,                     // Top vertical of vertical line                               |
    TopHrzntl,                    // Top end of horizontal                                       +-----------------+
    MidPoint,                     // Midpoint of vertical                                     EndVrtcl         BtmHrzntl
    EndVrtcl,                     // Bottom vertical of vertical line                          (x,y)             (x,y)
    BtmHrzntl: TPoint;            // Bottom end of horizontal
    intVrtclLngth,                // Full length of vertical line
    intVrtclSpc,                  // Vertical space taken to form most parent node
    VrtclTopLngth,                // Vertical top height for bracket graph
    VrtclBttmLngth,               // Vertical bottom height for bracket graph
    VrtclFctr: integer
  end;                            //                                                           TopVrtcl
  TTplgyOnly = record             //                                                            (x,y)
    TopVrtcl,                     // Top end of vertical line                                     +
    BtmVrtcl,                     // Bottom end of vertical line                                  |
    BgnHrzntl,                    // Begin of horizontal line            BgnHrzntl                |EndHrzntl
    EndHrzntl: TPoint;            // End of horizontal line                (x,y)+-----------------+(x,y)
    Completed,                    // Node doen't need further drawing                             |
    Connected,                    // Node is connected to children                                |
    Attached,                     // Node is attached ready for drawing and connecting            +
    Drawn: boolean;               // Node is drawn                                             BtmVrtcl
  end;                            //                                                            (x,y)
  TSpeciesAndNodes = record       //
    NewickToken,                  // Newick name for each species or node.         EndSegment(x,y)
    SpeciesName: string;          // Name of species for measurement records                   +
    dblAngle,                     // Divertion angle from parent node                         /|
    BranchLength: double;         // Distance for square bracket tree                        / |
    BeginSegment,                 // Begin point of branch                                  /  |
    EndSegment: TSegment;         // End point of branch                                   /   |
    Leaves,                       // Number of leaves for                                H/    |O
    inxBracket,                   // Bracket position on rectangular tree                /     |
    NodeLevel,                    // Bracket level for tree                             /      |
    NodeTier,                     // For tier in same bracket levels                   /       |
    NodeParent: integer;          // Parent of this species                           /        |
    VerticalMode: TVerticalMode;  // Open, Parent, child, or leaf vertical line      /dblAngle |
    VrtclPosition: TVrtclPosition;// Position end and begin of vertical bracket     +----------+
    TplgyOnly: TTplgyOnly;        // Topology only graph points                BeginSegment  A
  end;                            //                                              (x,y)
  TDifferenceMatrix = array of array of array of double;  // Three dimesional array for species vs. species for test numerical
  TDistanceMatrix = array of array of double;             // Two dimesional array for species vs. species for distance
  TMeasurementMatrix = TDistanceMatrix;                   // Two dimesional array for species vs. tests measurements
  TBinaryMatix = array of array of char;                  // Two dimesional array for species vs. tests binary
  TMatchingMatrix = array of array of array of boolean;   // Two dimesional array for species vs. species for test binary
  TQMatrix = array of array of double;                    // Two dimesional array for species vs. species for Q Matrix
  TFullQMatrix = array of TQMatrix;                       // Three dimesion array for species vs. species for Q Matrix
  TBSMeasurementMatrix = array of TMeasurementMatrix;     // Boot Strap Three dimesional array for species vs. tests measurements
  TBSBinaryMatix = array of TBinaryMatix;                 // Boot Strap Three dimesional array for species vs. tests binary
  TIsActive = array of boolean;                           // Array of active boolean species
  TBSQIndex = array of integer;                           // Array of QIdexes for species
  TArrayInteger = TBSQIndex;
  TDistanceIndex = array[0..2] of integer;                // Array index of final 3 distances of Distance Matrix
  TDoubleArray = array of double;
  TBSDistanceMatrix = array of TDistanceMatrix;
  TBSSpeciesNodes = array of TSpeciesAndNodes;
  TTestTableForSpecies = record
    wrdDataType,                                    // Type of data measurement
    SpeciesCount,                                   // Number of species
    NodeCount,                                      // Number of nodes or species
    LastNode,
    TestCount,                                      // Number of tests
    TierCount,
    ErrorCount: word;                               // Number of errors
    inxQ: integer;                                  // Indice of Last QMatrix created
    boolBootStrap: boolean;                         // Bootstrap is being calculated
    SpeciesTitle: string;                           // Title over species name for species group
    TestTitle: array of string;                     // Title for each test
    Species: TBSSpeciesNodes;                       // Array of species measurement records.  Zero based array.
    IsActive: TIsActive;                            // Whether Species is available to calculate distance matrix or Q Matrix
    QIndex: TBSQIndex;                              // Array index to hold QMatrix working indices
    Measurement: TMeasurementMatrix;                // Measurement for tests for species.  Zero based array.  Species by Tests
    Binary: TBinaryMatix;                           // Binary data for tests for species.  Zero based array.  Species by Tests
    iarRplctMtchs: TArrayInteger;                   // Array of matching replicates
    inxSpcsQM: array of integer;                    // Reverse of QIndex holds position of QMatrix in Distance matrix.
    HiddenNodeName: string;
    HiddenPercent: double;
    BSPercent: TDoubleArray;
    HiddenMatches: integer;
    sngHalfInterior,
    sngHalfAngle,
    sngInterior,
    sngExterior,
    sngIntrrOffset,
    sngExtrrOffset: single;
  end;
  TNodePoint = array[0..1] of integer;
  TSegmentPoints = array[0..1] of TNodePoint;
  TDuplicateNodes = array of integer;

const
  EmptySegment: TSegment = (pntRadial:(x:0; y:0); int1stXNd:0; int2ndXNd:0);
  EmptySpecies: TSpeciesAndNodes =(NewickToken:''; SpeciesName:''; dblAngle:0.0; BranchLength:0.0; BeginSegment:(pntRadial:(x:0; y:0); int1stXNd:-1; int2ndXNd:-1);
                                   EndSegment:(pntRadial:(x:0; y:0); int1stXNd:-1; int2ndXNd:-1); Leaves:0; inxBracket:-1; NodeLevel:-1; NodeTier:0; NodeParent:0; VerticalMode:Open;
                                   VrtclPosition:(BgnVrtcl:(x:0; y:0); TopHrzntl:(x:0; y:0); MidPoint:(x:0; y:0); EndVrtcl:(x:0; y:0); BtmHrzntl:(x:0; y:0); intVrtclLngth:0; intVrtclSpc:0; VrtclTopLngth:0; VrtclBttmLngth:0; VrtclFctr:0);
                                   TplgyOnly:(TopVrtcl:(x:0; y:0); BtmVrtcl:(x:0; y:0); BgnHrzntl:(x:0; y:0); EndHrzntl:(x:0; y:0); Completed:False; Connected:False; Attached:False; Drawn:False));
  DefineOrigin: TOrigin = (initWidth:0; initHeight:0; ttoBracket:(GraphOrigin:(x:0; y:0); Width:0; Height:0); ttoTplgyOnly:(GraphOrigin:(x:0; y:0); Width:0; Height:0); ttoRadial:(GraphOrigin:(x:0; y:0); Width:0; Height:0));

var
  TestTableForSpeciesData: TTestTableForSpecies; {Test table for measurement and binary data}
  rctSelectedCell: TGridRect;                    {Cell location holding error value}
  DifferenceMatrix: TDifferenceMatrix;           {Difference table for measerement data}
  MatchingMatrix: TMatchingMatrix;               {Matching table for binary data}
  QMatrix: TFullQMatrix;
  DistanceMatrix: TDistanceMatrix;
  carBinary: TBSBinaryMatix;
  darBtStrpRwDtMsrmnt: TBSMeasurementMatrix;
  darBSDistanceMatrix: TBSDistanceMatrix;
  darBSQMatrix: TFullQMatrix;
  boolarIsActive: TIsActive;
  intPixelFactor: integer;
  Origin: TOrigin;
  boolGraphInitial: boolean;
  arryinxBracket: array of array of integer;
  ariNextNd,
  ariInsrtnPnt,
  ariInsrtnNd: array of integer;
  iarReplicates,
  iarInsrtnPnt: array of array of integer;
  arstrConnected,
  arstrNodeNames: array of array of string;
  arsNewickBanch: array of array of string;
  NullSegment: TSegment;
  ariNodeParent: array[0..2] of integer;
  DuplicateNodes: TDuplicateNodes;
  strCurrentDir: string;
  strlstDstncMtrx,
  strlstArrayErrs,
  strlstCalcErrs: TStringList;

function intBnryPwr(const intExp: integer): integer;
function strRepeat(const C:char; const N: integer): string;
function strToF(const boolToF: boolean; const strTrue, strFalse: string): string;
function strSpcToUndrscr(const strSpaced: string): string;

implementation

function intBnryPwr(const intExp: integer): integer;
var
  inx: integer;
begin
  if intExp < 0 then
    Result := 0
  else
  begin
    Result := 1;
    for inx := 1 to intExp do
      Result := Result * 2;
  end;
end;

function strRepeat(const C:char; const N: integer): string;
var
  inx: integer;
begin
  Result := '';
  for inx := 1 to N do
    Result := Result + C;
end;

function strToF(const boolToF: boolean; const strTrue, strFalse: string): string;
begin
  if boolToF then
    Result := strTrue
  else
    Result := strFalse;
end;

function strSpcToUndrscr(const strSpaced: string): string;
var
  inx: integer;
begin
  Result := strSpaced;
  for inx := 1 to Length(strSpaced) do
    if strSpaced[inx] = ' ' then
      Result[inx] := '_';
end;

end.

